功能模块

1. 提供基础的分页对象
2. 提供基础的返回结果集对象
3. 提供工具类集 com.villa.util包
4. 提供/back和/api的拦截器
	1) 请求/back必须携带token (如果不需要,则需要在类上加上NoLogin注解)
	2) 请求/api 同上
5. 提供redis基础模块
	1) 将登陆的token会放进redis中
	2) 提供redis的连接池和redis工具类
	3) 提供login配置参数
	    delay：登录的token过期时间，默认以秒为单位 支持纯数字和 60*60这样的写法
	    sso：  是否启用单点登录，值为账户/用户模型中的主键getter方法名 比如:getId 将通过主键id来控制单点
6. 解析NoLogin注解 放行(不拦截登陆)此资源
7. 解析NoSign注解 添加后方法不需要签名
8. 反爬虫机制  同token 1秒最多能发起15次请求 同ip：1秒最多能发起25次请求 （暂未实现）
9. 国际化实现,但并未实现具体的语言包  开启i18n需要在yml配置文件中将i18n属性设置为true
    语言包处理类对接规则如下：
    @I18NHandlerType("en-US")  //语言码
    @Component
    public class EnglishLanguageHandler extends I18NBaseHandler {//需要集成此父类，这个父类中对资源文件进行了处理
        public EnglishLanguageHandler(){
            super(I18NBaseHandler.class.getClassLoader().getResourceAsStream("i18n/messages_en_US.properties"));//需要获取文件流 这里对父级构造器做了重载处理,传一个路径也可以
        }
    }

7. 签名算法如下：


8. 如果要启用redis需要在application.yml中配置如下属性
jedis :
  pool :
    host : redis的id
    port : redis的端口
    timeout: 100000
    password: redis的密码
  config :
      maxTotal: 100
      maxIdle: 10
      maxWaitMillis : 100000
9. 注解式验证
列：
@Validate({
        @Check(field = "guid",msg = "请输入悠悠牧歌的用户id"),
        @Check(field = "head_img",msg = "请上传头像"),
        @Check(field = "nickname",msg = "请输入昵称"),
        @Check(field = "phone",type=Util.assertionIsPhone,msg = "请输入手机号码")
})
public void insert(User obj){
    userDAO.insert(obj);
}

Check注解代码如下：

@Target({ElementType.PARAMETER})
@Retention(RetentionPolicy.RUNTIME)
public @interface Check {
    /**
     * 要验证的属性
     * 会遍历方法的参数对象去寻找
     * 注意：如果service方法有多个参数 而且有相同名字的属性,这里会默认取第一个
     */
    String[] field();
    /**
     * 验证方法 默认验证非空 可以自定义,如果自定义,那么clz也需要传入自定义的类字节码
     */
    String type() default Util.assertionIsNotNullOrEmpty;

    Class clz() default Util.class;//校验方法的所在类 可以自定义
    /**
     * 验证失败的消息
     */
    String msg() default "";//错误提示消息 默认空 如果自定义验证规则的话 就不需要了 直接在验证方法中抛错就行
}
10. 登录token授权
11. 白名单机制 ip使用逗号","隔开
12. 拦截器开关
13. 参数加密开关